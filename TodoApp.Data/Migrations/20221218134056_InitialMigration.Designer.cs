// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoApp.Data.Entities;

#nullable disable

namespace TodoApp.Data.Migrations
{
    [DbContext(typeof(TodoAppDbContext))]
    [Migration("20221218134056_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoApp.Data.Entities.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "dumpovci"
                        },
                        new
                        {
                            Id = 2,
                            Name = "pripravnici"
                        });
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.GroupUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 3,
                            GroupId = 1
                        },
                        new
                        {
                            UserId = 1,
                            GroupId = 2
                        },
                        new
                        {
                            UserId = 2,
                            GroupId = 2
                        });
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ListId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DueDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListId = 1,
                            Priority = 1,
                            Status = 0,
                            Title = "Organizacija daysa"
                        },
                        new
                        {
                            Id = 2,
                            DueDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListId = 1,
                            Priority = 1,
                            Status = 0,
                            Title = "Organizacija Internshipa"
                        },
                        new
                        {
                            Id = 3,
                            DueDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListId = 1,
                            Priority = 3,
                            Status = 0,
                            Title = "Novi youtube videa"
                        },
                        new
                        {
                            Id = 4,
                            DueDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListId = 2,
                            Priority = 1,
                            Status = 0,
                            Title = "Organizacija ciklusa"
                        },
                        new
                        {
                            Id = 5,
                            DueDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListId = 3,
                            Priority = 1,
                            Status = 0,
                            Title = "Domaci rad"
                        });
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Lists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupId = 1,
                            Name = "Standardni projekti"
                        },
                        new
                        {
                            Id = 2,
                            GroupId = 1,
                            Name = "Vremenski neodredeni projekti"
                        },
                        new
                        {
                            Id = 3,
                            GroupId = 2,
                            Name = "Tjedni zadaci"
                        });
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("user_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("user_type").HasValue("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Bartol",
                            LastName = "Deak"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Ante",
                            LastName = "Roca"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Matija",
                            LastName = "Luketin"
                        });
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.Customer", b =>
                {
                    b.HasBaseType("TodoApp.Data.Entities.Models.User");

                    b.Property<DateTime>("SubscriptionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("customer");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            FirstName = "Ante",
                            LastName = "Vuletic",
                            SubscriptionEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.GroupUser", b =>
                {
                    b.HasOne("TodoApp.Data.Entities.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoApp.Data.Entities.Models.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.Item", b =>
                {
                    b.HasOne("TodoApp.Data.Entities.Models.List", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.List", b =>
                {
                    b.HasOne("TodoApp.Data.Entities.Models.Group", "Group")
                        .WithMany("Lists")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.Group", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Lists");
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.List", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TodoApp.Data.Entities.Models.User", b =>
                {
                    b.Navigation("GroupUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
